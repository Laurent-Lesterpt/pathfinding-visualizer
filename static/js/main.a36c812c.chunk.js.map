{"version":3,"sources":["res/pathFinding.png","res/drag_drop.gif","res/createWalls.gif","res/algo.gif","res/tutorial.png","res/theEnd.png","PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/PahtfindingVisualizer.jsx","TopNavBar/TopNavBar.js","InformationNav/InformationNav.js","App.js","serviceWorker.js","algorithms/commonalities.js","algorithms/dijkstra.js","algorithms/astar.js","algorithms/greedyAstar.js","store/gridReducer.js","store/turorialReducer.js","index.js"],"names":["module","exports","Node","this","props","col","isFinish","isFinishDragged","isStart","isStartDragged","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","className","id","Component","PathfindingVisualizer","getInitialGrid","currentPage","src","tutorialImage","alt","pathfindingImage","dragDrop","createWalls","algoVisualization","endImage","nbPages","type","onClick","nextPage","previousPage","skipTutorial","grid","map","rowIdx","key","node","nodeIdx","mouseIsPressed","handleMouseDown","handleMouseEnter","handleMouseUp","connect","state","gridReducer","tutorialReducer","dispatch","TopNavBar","Navbar","bg","variant","Brand","clearGrid","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","visualizeDijkstra","visualizeAstar","visualizeGreedyAstar","Link","clearPath","InformationNav","eventKey","disabled","clearBoard","App","hot","Boolean","window","location","hostname","match","getAllNodes","nodes","push","getUnvisitedNeighbors","neighbors","length","filter","neighbor","isVisited","dijkstra","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodaA","nodeB","unvisitedNeighbors","previousNode","astar","cost","sortNodesByCost","heuristic","Math","abs","greedyAstar","sortNodesByHeuristic","initialState","startIsDragged","finishIsDragged","DRAGGED_NODE_PREVIOUS_ROW","DRAGGED_NODE_PREVIOUS_COL","DRAGGED_NODE_INITIAL_ROW","DRAGGED_NODE_INITIAL_COL","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","currentRow","createNode","document","getElementById","newGrid","slice","getNewGridWithWallToggled","newNode","getNewStateWithStartOrFinishDragged","newStartIsDragged","newFinishIsDragged","getNewGridWithStartOrFinishDropped","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","visualize","algo","animateAlgo","currentNode","unshift","getNodesInShortestPathOrder","reducer","action","newState","stateAfterDrag","stateAfterDragEnter","style","display","rootReducer","combineReducers","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,gRCGtBC,G,6LACT,IAAD,EAYHC,KAAKC,MAVPC,EAFK,EAELA,IACAC,EAHK,EAGLA,SACAC,EAJK,EAILA,gBACAC,EALK,EAKLA,QACAC,EANK,EAMLA,eACAC,EAPK,EAOLA,OACAC,EARK,EAQLA,YACAC,EATK,EASLA,aACAC,EAVK,EAULA,UACAC,EAXK,EAWLA,IAEIC,EAAiBR,EACnB,sBACAE,EACA,qBACAH,EACA,cACAE,EACA,aACAE,EACA,YACA,GACJ,OACE,yBACEM,UAAS,eAAUD,GACnBE,GAAE,eAAUH,EAAV,YAAiBT,GACnBM,YAAa,kBAAMA,EAAYG,EAAKT,IACpCO,aAAc,kBAAMA,EAAaE,EAAKT,IACtCQ,UAAW,kBAAMA,W,GA/BSK,c,8GCQ5BC,G,kMAEFhB,KAAKC,MAAMgB,mB,+BAGH,IAAD,OACP,OACE,oCACE,yBAAKH,GAAG,YACsB,IAA3Bd,KAAKC,MAAMiB,YACV,oCACE,kEACA,4GACA,0IAIA,yBAAKJ,GAAG,YAAYK,IAAKC,IAAeC,IAAI,sBAE5C,KACwB,IAA3BrB,KAAKC,MAAMiB,YACV,oCACE,uEACA,wGAC2E,6BAD3E,mEAIA,oFACA,yBAAKJ,GAAG,YAAYK,IAAKG,IAAkBD,IAAI,sBAE/C,KACwB,IAA3BrB,KAAKC,MAAMiB,YACV,oCACE,kFACA,4BACE,4BACE,iFACA,4CACA,kEACA,yFACA,kGAIJ,KACwB,IAA3BlB,KAAKC,MAAMiB,YACV,oCACE,iFACA,oGACA,4GACA,yBAAKJ,GAAG,YAAYK,IAAKI,IAAUF,IAAI,cAEvC,KACwB,IAA3BrB,KAAKC,MAAMiB,YACV,oCACE,6CACA,gFACA,2FACA,yBAAKJ,GAAG,YAAYK,IAAKK,IAAaH,IAAI,sBAE1C,KACwB,IAA3BrB,KAAKC,MAAMiB,YACV,oCACE,mEACA,iGACA,sIAGA,yBAAKJ,GAAG,YAAYK,IAAKM,IAAmBJ,IAAI,sBAEhD,KACwB,IAA3BrB,KAAKC,MAAMiB,YACV,oCACE,iEACA,mGACA,4BACA,yBAAKJ,GAAG,YAAYK,IAAKO,IAAUL,IAAI,sBAEvC,KACJ,yBAAKP,GAAG,mBACLd,KAAKC,MAAMiB,YADd,IAC4BlB,KAAKC,MAAM0B,SAEvC,4BACEb,GAAG,aACHD,UAAU,6BACVe,KAAK,SACLC,QAAS,kBAAM,EAAK5B,MAAM6B,aAJ5B,QAQA,4BACEhB,GAAG,iBACHD,UAAU,6BACVe,KAAK,SACLC,QAAS,kBAAM,EAAK5B,MAAM8B,iBAJ5B,YAQA,4BACEjB,GAAG,aACHD,UAAU,6BACVe,KAAK,SACLC,QAAS,kBAAM,EAAK5B,MAAM+B,iBAJ5B,kBASF,yBAAKnB,UAAU,QACZb,KAAKC,MAAMgC,KAAKC,KAAI,SAACvB,EAAKwB,GACzB,OACE,yBAAKtB,UAAU,WAAWuB,IAAKD,GAC5BxB,EAAIuB,KAAI,SAACG,EAAMC,GAAa,IACpB3B,EAAwE0B,EAAxE1B,IAAKT,EAAmEmC,EAAnEnC,IAAKC,EAA8DkC,EAA9DlC,SAAUC,EAAoDiC,EAApDjC,gBAAiBC,EAAmCgC,EAAnChC,QAASC,EAA0B+B,EAA1B/B,eAAgBC,EAAU8B,EAAV9B,OACrE,OACE,kBAAC,EAAD,CACE6B,IAAKE,EACLpC,IAAKA,EACLC,SAAUA,EACVC,gBAAiBA,EACjBC,QAASA,EACTC,eAAgBA,EAChBC,OAAQA,EACRgC,eAAgB,EAAKtC,MAAMsC,eAC3B/B,YAAa,SAACG,EAAKT,GAAN,OAAc,EAAKD,MAAMuC,gBAAgB7B,EAAKT,IAC3DO,aAAc,SAACE,EAAKT,GAAN,OAAc,EAAKD,MAAMwC,iBAAiB9B,EAAKT,IAC7DQ,UAAW,kBAAM,EAAKT,MAAMyC,cAAc/B,EAAKT,IAC/CS,IAAKA,iB,GA9HSI,cAgKrB4B,eArBS,SAAAC,GACtB,MAAO,CACLX,KAAMW,EAAMC,YAAYZ,KACxBM,eAAgBK,EAAMC,YAAYN,eAClCrB,YAAa0B,EAAME,gBAAgB5B,YACnCS,QAASiB,EAAME,gBAAgBnB,YAIR,SAAAoB,GACzB,MAAO,CACL9B,eAAgB,kBAAM8B,EAAS,CAACnB,KAAM,oBACtCI,aAAc,kBAAMe,EAAS,CAACnB,KAAM,kBACpCE,SAAU,kBAAMiB,EAAS,CAACnB,KAAM,cAChCG,aAAc,kBAAMgB,EAAS,CAACnB,KAAM,kBACpCY,gBAAiB,SAAC7B,EAAKT,GAAN,OAAc6C,EAAS,CAACnB,KAAM,kBAAmBjB,IAAKA,EAAKT,IAAKA,KACjFuC,iBAAkB,SAAC9B,EAAKT,GAAN,OAAc6C,EAAS,CAACnB,KAAM,mBAAoBjB,IAAKA,EAAKT,IAAKA,KACnFwC,cAAe,SAAC/B,EAAKT,GAAN,OAAc6C,EAAS,CAACnB,KAAM,gBAAiBjB,IAAKA,EAAKT,IAAKA,QAIlEyC,CAGb3B,G,2BC1KIgC,E,iLACM,IAAD,OACP,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcvB,QAAS,kBAAM,EAAK5B,MAAMoD,aAAaC,KAAK,KAA1D,0BAGA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiB3C,GAAG,oBAClB,kBAAC4C,EAAA,EAAD,CAAK7C,UAAU,WACb,kBAAC8C,EAAA,EAAD,CAAaC,MAAM,aAAa9C,GAAG,sBACjC,kBAAC6C,EAAA,EAAYE,KAAb,CAAkBhC,QAAS,kBAAM,EAAK5B,MAAM6D,sBAA5C,YACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBhC,QAAS,kBAAM,EAAK5B,MAAM8D,mBAA5C,MACA,kBAACJ,EAAA,EAAYE,KAAb,CAAkBhC,QAAS,kBAAM,EAAK5B,MAAM+D,yBAA5C,cAEF,kBAACN,EAAA,EAAIG,KAAL,CAAUhC,QAAS,kBAAM,EAAK5B,MAAMoD,cAClC,kBAACK,EAAA,EAAIO,KAAL,oBAEF,kBAACP,EAAA,EAAIG,KAAL,CAAUhC,QAAS,kBAAM,EAAK5B,MAAMiE,cAClC,kBAACR,EAAA,EAAIO,KAAL,2B,GAnBUlD,aA0CT4B,eAdS,SAAAC,GACtB,MAAO,MAGkB,SAAAG,GACzB,MAAO,CACLe,kBAAmB,kBAAMf,EAAS,CAACnB,KAAM,uBACzCmC,eAAgB,kBAAMhB,EAAS,CAACnB,KAAM,oBACtCoC,qBAAsB,kBAAMjB,EAAS,CAACnB,KAAM,0BAC5CyB,UAAW,kBAAMN,EAAS,CAACnB,KAAM,eACjCsC,UAAW,kBAAMnB,EAAS,CAACnB,KAAM,kBAItBe,CAGbK,GC3CImB,G,uLAEF,OACE,kBAACT,EAAA,EAAD,CAAK7C,UAAU,0BACb,kBAAC6C,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAIO,KAAL,CAAUG,SAAS,WAAWC,UAAQ,GACpC,yBAAKxD,UAAU,oCACf,2CAGJ,kBAAC6C,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAIO,KAAL,CAAUG,SAAS,WAAWC,UAAQ,GACpC,yBAAKxD,UAAU,qCACf,4CAGJ,kBAAC6C,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAIO,KAAL,CAAUG,SAAS,WAAWC,UAAQ,GACpC,yBAAKxD,UAAU,mCACf,0C,GAnBiBE,cAwCd4B,eAbS,SAAAC,GACtB,MAAO,MAGkB,SAAAG,GACzB,MAAO,CACLe,kBAAmB,kBAAMf,EAAS,CAACnB,KAAM,uBACzCmC,eAAgB,kBAAMhB,EAAS,CAACnB,KAAM,oBACtC0C,WAAY,kBAAMvB,EAAS,CAACnB,KAAM,gBAClCsC,UAAW,kBAAMnB,EAAS,CAACnB,KAAM,kBAItBe,CAGbwB,GC1CII,E,iLAEF,OACE,yBAAK1D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUE,aAYHyD,gBAAID,GCPCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBClBC,SAASC,EAAY7C,GAC1B,IAAM8C,EAAQ,GADkB,uBAEhC,YAAkB9C,EAAlB,+CAAwB,CAAC,IAAdtB,EAAa,+BACtB,YAAmBA,EAAnB,+CAAwB,CAAC,IAAd0B,EAAa,QACtB0C,EAAMC,KAAK3C,IAFS,oFAFQ,kFAOhC,OAAO0C,EAeF,SAASE,EAAsB5C,EAAMJ,GAC1C,IAAMiD,EAAY,GACXhF,EAAYmC,EAAZnC,IAAKS,EAAO0B,EAAP1B,IAKZ,OAJIA,EAAM,GAAGuE,EAAUF,KAAK/C,EAAKtB,EAAM,GAAGT,IACtCS,EAAMsB,EAAKkD,OAAS,GAAGD,EAAUF,KAAK/C,EAAKtB,EAAM,GAAGT,IACpDA,EAAM,GAAGgF,EAAUF,KAAK/C,EAAKtB,GAAKT,EAAM,IACxCA,EAAM+B,EAAK,GAAGkD,OAAS,GAAGD,EAAUF,KAAK/C,EAAKtB,GAAKT,EAAM,IACtDgF,EAAUE,QAAO,SAAAC,GAAQ,OAAKA,EAASC,aC3BzC,SAASC,EAAStD,EAAMuD,EAAWC,GACxC,IAAKD,IAAcC,GAAcD,IAAcC,EAC7C,OAAO,EAET,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAErB,IADA,IAAMC,EAAiBd,EAAY7C,GAC5B2D,EAAeT,QAAQ,CAC5BU,EAAoBD,GACpB,IAAME,EAAcF,EAAeG,QACnC,IAAID,EAAYvF,OAAhB,CACA,GAAIuF,EAAYH,WAAaK,IAAU,OAAON,EAG9C,GAFAI,EAAYR,WAAY,EACxBI,EAAoBV,KAAKc,GACrBA,IAAgBL,EAAY,OAAOC,EACvCO,EAAyBH,EAAa7D,KAI1C,SAAS4D,EAAoBD,GAC3BA,EAAeM,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMR,SAAWS,EAAMT,YAG/D,SAASM,EAAyB5D,EAAMJ,GACtC,IAAMoE,EAAqBpB,EAAsB5C,EAAMJ,GADX,uBAE5C,YAAuBoE,EAAvB,+CAA2C,CAAC,IAAjChB,EAAgC,QACzCA,EAASM,SAAWtD,EAAKsD,SAAW,EACpCN,EAASiB,aAAejE,GAJkB,mFCvBvC,SAASkE,EAAMtE,EAAMuD,EAAWC,GACrC,IAAKD,IAAcC,GAAcD,IAAcC,EAC7C,OAAO,EAET,IAAMC,EAAsB,GAC5BF,EAAUgB,KAAO,EACjBhB,EAAUG,SAAW,EAErB,IADA,IAAMC,EAAiBd,EAAY7C,GAC5B2D,EAAeT,QAAQ,CAC5BsB,EAAgBb,GAChB,IAAME,EAAcF,EAAeG,QACnC,IAAID,EAAYvF,OAAhB,CACA,GAAIuF,EAAYH,WAAaK,IAAU,OAAON,EAG9C,GAFAI,EAAYR,WAAY,EACxBI,EAAoBV,KAAKc,GACrBA,IAAgBL,EAAY,OAAOC,EACvCO,EAAyBH,EAAa7D,EAAMwD,KAIhD,SAASgB,EAAgBb,GACvBA,EAAeM,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMK,KAAOJ,EAAMI,QAG3D,SAASP,EAAyB5D,EAAMJ,EAAMwD,GAC5C,IAAMY,EAAqBpB,EAAsB5C,EAAMJ,GADC,uBAExD,YAAuBoE,EAAvB,+CAA2C,CAAC,IAAjChB,EAAgC,QACzCA,EAASM,SAAWtD,EAAKsD,SAAW,EACpCN,EAASqB,UAAYC,KAAKC,IAAInB,EAAWvF,IAAMmF,EAASnF,KAAOyG,KAAKC,IAAInB,EAAW9E,IAAM0E,EAAS1E,KAClG0E,EAASmB,KAAOnB,EAASM,SAAWN,EAASqB,UAC7CrB,EAASiB,aAAejE,EACpBgD,EAAS9E,SAAQ8E,EAASmB,KAAOR,MAPiB,mFCxBnD,SAASa,EAAY5E,EAAMuD,EAAWC,GAC3C,IAAKD,IAAcC,GAAcD,IAAcC,EAC7C,OAAO,EAET,IAAMC,EAAsB,GAC5BF,EAAUkB,UAAY,EACtBlB,EAAUG,SAAW,EAErB,IADA,IAAMC,EAAiBd,EAAY7C,GAC5B2D,EAAeT,QAAQ,CAC5B2B,EAAqBlB,GACrB,IAAME,EAAcF,EAAeG,QACnC,IAAID,EAAYvF,OAAhB,CACA,GAAIuF,EAAYH,WAAaK,IAAU,OAAON,EAG9C,GAFAI,EAAYR,WAAY,EACxBI,EAAoBV,KAAKc,GACrBA,IAAgBL,EAAY,OAAOC,EACvCO,EAAyBH,EAAa7D,EAAMwD,KAIhD,SAASqB,EAAqBlB,GAC5BA,EAAeM,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMO,UAAYN,EAAMM,aAGhE,SAAST,EAAyB5D,EAAMJ,EAAMwD,GAC5C,IAAMY,EAAqBpB,EAAsB5C,EAAMJ,GADC,uBAExD,YAAuBoE,EAAvB,+CAA2C,CAAC,IAAjChB,EAAgC,QACzCA,EAASM,SAAWtD,EAAKsD,SAAW,EACpCN,EAASqB,UAAYC,KAAKC,IAAInB,EAAWvF,IAAMmF,EAASnF,KAAOyG,KAAKC,IAAInB,EAAW9E,IAAM0E,EAAS1E,KAClG0E,EAASmB,KAAOnB,EAASM,SAAWtD,EAAKqE,UACzCrB,EAASiB,aAAejE,EACpBgD,EAAS9E,SAAQ8E,EAASqB,UAAYV,MAPY,mF,yjBCrB1D,IAAMe,EAAe,CACnB9E,KAAM,GACNM,gBAAgB,EAChByE,gBAAgB,EAChBC,iBAAiB,GAEfC,GAA4BlB,IAC5BmB,GAA4BnB,IAC5BoB,GAA2BpB,IAC3BqB,GAA2BrB,IAC3BsB,GAAiB,GACjBC,GAAiB,EACjBC,GAAkB,GAClBC,GAAkB,GAiGhBxG,GAAiB,WAErB,IADA,IAAMgB,EAAO,GACJtB,EAAM,EAAGA,EAlGJ,GAkGmBA,IAAO,CAEtC,IADA,IAAM+G,EAAa,GACVxH,EAAM,EAAGA,EAnGN,GAmGqBA,IAC/BwH,EAAW1C,KAAK2C,GAAWhH,EAAKT,IAElC+B,EAAK+C,KAAK0C,GAEZ,OAAOzF,GAGHoB,GAAY,WAChB,IAAK,IAAI1C,EAAM,EAAGA,EA7GJ,GA6GmBA,IAC/B,IAAK,IAAIT,EAAM,EAAGA,EA7GN,GA6GqBA,IAC/B0H,SAASC,eAAT,eAAgClH,EAAhC,YAAuCT,IAAOW,UAAY,OAK9D,OAFA+G,SAASC,eAAT,eAAgCP,GAAhC,YAAkDC,KAAkB1G,UAAY,kBAChF+G,SAASC,eAAT,eAAgCL,GAAhC,YAAmDC,KAAmB5G,UAAY,mBAC3EI,MAGHiD,GAAY,SAAAjC,GAEhB,IADA,IAAM6F,EAAU7F,EAAK8F,QACZpH,EAAM,EAAGA,EAzHJ,GAyHmBA,IAC/B,IAAK,IAAIT,EAAM,EAAGA,EAzHN,GAyHqBA,IAC3B+B,EAAKtB,GAAKT,GAAKK,QACjBqH,SAASC,eAAT,eAAgClH,EAAhC,YAAuCT,IAAOW,UAAY,iBAC1DiH,EAAQnH,GAAKT,GAAOyH,GAAWhH,EAAKT,GACpC4H,EAAQnH,GAAKT,GAAKK,QAAS,IAE3BqH,SAASC,eAAT,eAAgClH,EAAhC,YAAuCT,IAAOW,UAAY,OAC1DiH,EAAQnH,GAAKT,GAAOyH,GAAWhH,EAAKT,IAM1C,OAFA0H,SAASC,eAAT,eAAgCP,GAAhC,YAAkDC,KAAkB1G,UAAY,kBAChF+G,SAASC,eAAT,eAAgCL,GAAhC,YAAmDC,KAAmB5G,UAAY,mBAC3EiH,GAGHH,GAAa,SAAChH,EAAKT,GACvB,MAAO,CACLA,MACAS,MACAN,QAASM,IAAQ2G,IAAkBpH,IAAQqH,GAC3CpH,SAAUQ,IAAQ6G,IAAmBtH,IAAQuH,GAC7C9B,SAAUK,IACVQ,KAAMR,IACNU,UAAWV,IACXV,WAAW,EACX/E,QAAQ,EACR+F,aAAc,KACdhG,gBAAgB,EAChBF,iBAAiB,IAIf4H,GAA4B,SAAC/F,EAAMtB,EAAKT,EAAK8G,EAAgBC,GACjE,IAAMa,EAAU7F,EAAK8F,QACf1F,EAAOyF,EAAQnH,GAAKT,GAC1B,GAAImC,EAAKhC,SAAWgC,EAAKlC,UAAY6G,GAAkBC,EAAiB,OAAOa,EAC/E,IAAMG,EAAO,KACR5F,EADQ,CAEX9B,QAAS8B,EAAK9B,SAGhB,OADAuH,EAAQnH,GAAKT,GAAO+H,EACbH,GAGHI,GAAsC,SAACjG,EAAMtB,EAAKT,EAAK8G,EAAgBC,GAC3E,IAAMa,EAAU7F,EAAK8F,QACf1F,EAAOyF,EAAQnH,GAAKT,GACtBiI,GAAoB,EACpBC,GAAqB,EAEzB,GAAI/F,EAAKhC,SAAW2G,EAAgB,CAClC,IAAMiB,EAAO,KACR5F,EADQ,CAEX/B,gBAAgB,IAElBwH,EAAQnH,GAAKT,GAAO+H,EACpBE,GAAoB,EAChB9F,EAAKhC,UACPgH,GAA2BnH,EAC3BkH,GAA2BzG,GAEzBqG,IACFc,EAAQZ,IAA2BC,IAA2B7G,gBAAiB,GAEjF4G,GAA4BvG,EAC5BwG,GAA4BjH,EAE9B,GAAImC,EAAKlC,UAAY8G,EAAiB,CACpC,IAAMgB,EAAO,KACR5F,EADQ,CAEXjC,iBAAiB,IAEnB0H,EAAQnH,GAAKT,GAAO+H,EACpBG,GAAqB,EACjB/F,EAAKlC,WACPkH,GAA2BnH,EAC3BkH,GAA2BzG,GAEzBsG,IACFa,EAAQZ,IAA2BC,IAA2B/G,iBAAkB,GAElF8G,GAA4BvG,EAC5BwG,GAA4BjH,EAE9B,OAAKmC,EAAKhC,SAAYgC,EAAKlC,SAGpB,CAAC8B,KAAM6F,EAASd,eAAgBmB,EAAmBlB,gBAAiBmB,IAGvEC,GAAqC,SAACpG,EAAMtB,EAAKT,EAAK8G,EAAgBC,GAC1E,IAAMa,EAAU7F,EAAK8F,QACf1F,EAAOyF,EAAQnH,GAAKT,GAC1B,IAAK8G,IAAmBC,EAAiB,OAAOa,EAChD,GAAId,EAAgB,CAClB,IAAMiB,EAAO,KACR5F,EADQ,CAEXhC,SAAS,EACTC,gBAAgB,IAElBwH,EAAQnH,GAAKT,GAAO+H,EACpBV,GAAiBrH,EACjBoH,GAAiB3G,EACbA,IAAQyG,IAA4BlH,IAAQmH,KAC9CS,EAAQV,IAA0BC,IAA0BhH,SAAU,GAG1E,GAAI4G,EAAiB,CACnB,IAAMgB,EAAO,KACR5F,EADQ,CAEXlC,UAAU,EACVC,iBAAiB,IAEnB0H,EAAQnH,GAAKT,GAAO+H,EACpBR,GAAkBvH,EAClBsH,GAAkB7G,EACdA,IAAQyG,IAA4BlH,IAAQmH,KAC9CS,EAAQV,IAA0BC,IAA0BlH,UAAW,GAG3E,OAAO2H,GAeHQ,GAAsB,SAAAC,GAC1B,IADuD,IAAD,WAC7CC,GACPC,YAAW,WACT,IAAMpG,EAAOkG,EAAyBC,GACtCZ,SAASC,eAAT,eAAgCxF,EAAK1B,IAArC,YAA4C0B,EAAKnC,MAAOW,UAAY,4BACnE,GAAK2H,IAJDA,EAAI,EAAGA,EAAID,EAAyBpD,OAAQqD,IAAM,EAAlDA,IAQLE,GAAY,SAACzG,EAAM0G,GACvB,IAAMnD,EAAYvD,EAAKqF,IAAgBC,IACjC9B,EAAaxD,EAAKuF,IAAiBC,KAvBvB,SAAC/B,EAAqB6C,GACxC,IADsE,IAAD,WAC5DC,GACPC,YAAW,WACT,IAAMpG,EAAOqD,EAAoB8C,GACjCZ,SAASC,eAAT,eAAgCxF,EAAK1B,IAArC,YAA4C0B,EAAKnC,MAAOW,UAAY,sBACnE,GAAK2H,IAJDA,EAAI,EAAGA,EAAI9C,EAAoBP,OAAQqD,IAAM,EAA7CA,GAMTC,YAAW,WACTH,GAAoBC,KACnB,GAAK7C,EAAoBP,QAiB5ByD,CAF4BD,EAAK1G,EAAMuD,EAAWC,GJrR7C,SAAqCA,GAG1C,IAFA,IAAM8C,EAA2B,GAC7BM,EAAcpD,EACK,OAAhBoD,GACLN,EAAyBO,QAAQD,GACjCA,EAAcA,EAAYvC,aAE5B,OAAOiC,EI+Q0BQ,CAA4BtD,KAIhDuD,GAhRC,WAAmC,IAAlCpG,EAAiC,uDAAzBmE,EAAckC,EAAW,uCAC1CC,EAAQ,KAAOtG,GAErB,OAAQqG,EAAOrH,MACb,IAAK,YACHsH,EAASjH,KAAOoB,KAChB,MAEF,IAAK,YACH6F,EAASjH,KAAOiC,GAAUgF,EAASjH,MACnC,MAEF,IAAK,iBACHiH,EAASjH,KAAOhB,KAChB,MAEF,IAAK,kBACHiI,EAAS3G,gBAAiB,EAC1B,IAAM4G,EAAiBjB,GACrBgB,EAASjH,KACTgH,EAAOtI,IACPsI,EAAO/I,IACPgJ,EAASlC,eACTkC,EAASjC,iBAEXiC,EAASjH,KAAOkH,EAAelH,KAC/BiH,EAASlC,eAAiBmC,EAAenC,eACzCkC,EAASjC,gBAAkBkC,EAAelC,gBAC1CiC,EAASjH,KAAO+F,GACdkB,EAASjH,KACTgH,EAAOtI,IACPsI,EAAO/I,IACPgJ,EAASlC,eACTkC,EAASjC,iBAEX,MAEF,IAAK,mBACH,IAAgC,IAA5BiC,EAAS3G,eAA0B,MACvC,IAAM6G,EAAsBlB,GAC1BgB,EAASjH,KACTgH,EAAOtI,IACPsI,EAAO/I,IACPgJ,EAASlC,eACTkC,EAASjC,iBAEXiC,EAASjH,KAAOmH,EAAoBnH,KACpCiH,EAASlC,eAAiBoC,EAAoBpC,eAC9CkC,EAASjC,gBAAkBmC,EAAoBnC,gBAC/CiC,EAASjH,KAAO+F,GACdkB,EAASjH,KACTgH,EAAOtI,IACPsI,EAAO/I,IACPgJ,EAASlC,eACTkC,EAASjC,iBAEX,MAEF,IAAK,gBACHiC,EAAS3G,gBAAiB,EAC1B2G,EAASjH,KAAOoG,GACda,EAASjH,KACTgH,EAAOtI,IACPsI,EAAO/I,IACPgJ,EAASlC,eACTkC,EAASjC,iBAEXiC,EAASlC,gBAAiB,EAC1BkC,EAASjC,iBAAkB,EAC3B,MAEF,IAAK,iBACHiC,EAASjH,KAAOiC,GAAUgF,EAASjH,MACnCyG,GAAUQ,EAASjH,KAAMsE,GACzB,MAEF,IAAK,oBACH2C,EAASjH,KAAOiC,GAAUgF,EAASjH,MACnCyG,GAAUQ,EAASjH,KAAMsD,GACzB,MAEF,IAAK,uBACH2D,EAASjH,KAAOiC,GAAUgF,EAASjH,MACnCyG,GAAUQ,EAASjH,KAAM4E,GAO7B,OAAOqC,G,mkBChHT,IAAMnC,GAAe,CACnB7F,YAAa,EACbS,QAAS,GA0BLK,GAAe,WACnB4F,SAASC,eAAe,YAAYwB,MAAMC,QAAU,QAGhDvH,GAAe,SAAAb,GACnB,OAAoB,IAAhBA,EAA0BA,EACdA,EAAc,GAI1BY,GAAW,SAAAZ,GACf,OAAIA,IAAgB6F,GAAapF,QAAgBT,EACjCA,EAAc,GAIjB8H,GAvCC,WAAmC,IAAlCpG,EAAiC,uDAAzBmE,GAAckC,EAAW,uCAC1CC,EAAQ,MAAOtG,GAErB,OAAQqG,EAAOrH,MACb,IAAK,WACHsH,EAAShI,YAAcY,GAASoH,EAAShI,aACzC,MAEF,IAAK,eACHgI,EAAShI,YAAca,GAAamH,EAAShI,aAC7C,MAEF,IAAK,eACHc,KAOJ,OAAOkH,GCdHK,GAAcC,YAAgB,CAClC3G,YAAaA,GACbC,gBAAiBA,KAEb2G,GAAQC,YAAYH,IAE1BI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,IACf,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SP4GpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a36c812c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pathFinding.eba1bad7.png\";","module.exports = __webpack_public_path__ + \"static/media/drag_drop.ffc71611.gif\";","module.exports = __webpack_public_path__ + \"static/media/createWalls.2643e023.gif\";","module.exports = __webpack_public_path__ + \"static/media/algo.87806a3b.gif\";","module.exports = __webpack_public_path__ + \"static/media/tutorial.9bb83ab5.png\";","module.exports = __webpack_public_path__ + \"static/media/theEnd.5414d867.png\";","import React, {Component} from 'react'\nimport './Node.css'\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isFinishDragged,\n      isStart,\n      isStartDragged,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props\n    const extraClassName = isFinishDragged\n      ? 'node-finish-dragged'\n      : isStartDragged\n      ? 'node-start-dragged'\n      : isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : ''\n    return (\n      <div\n        className={`node ${extraClassName}`}\n        id={`node-${row}-${col}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport Node from './Node/Node'\nimport {connect} from 'react-redux'\nimport pathfindingImage from '../res/pathFinding.png'\nimport dragDrop from '../res/drag_drop.gif'\nimport createWalls from '../res/createWalls.gif'\nimport algoVisualization from '../res/algo.gif'\nimport tutorialImage from '../res/tutorial.png'\nimport endImage from '../res/theEnd.png'\nimport './PathfindingVisualizer.css'\n\nclass PathfindingVisualizer extends Component {\n  componentDidMount() {\n    this.props.getInitialGrid()\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"tutorial\">\n          {this.props.currentPage === 1 ? (\n            <>\n              <h3>Welcome to Pathfinding Visualizer!</h3>\n              <h6>This tutorial will walk you through all of the features of this application.</h6>\n              <p>\n                If you want to dive right in, feel free to press the \"Skip Tutorial\" button below. Otherwise, press\n                \"Next\"!\n              </p>\n              <img id=\"mainImage\" src={tutorialImage} alt=\"pathfindingImage\" />\n            </>\n          ) : null}\n          {this.props.currentPage === 2 ? (\n            <>\n              <h3>First, what is a pathfinding algorithm?</h3>\n              <h6>\n                A pathfinding algorithm seeks to find a path between two points A and B. <br />\n                This application shows various pathfinding algorithms in action\n              </h6>\n              <p>All of the algorithms shown are adapted for a 2D grid</p>\n              <img id=\"mainImage\" src={pathfindingImage} alt=\"pathfindingImage\" />\n            </>\n          ) : null}\n          {this.props.currentPage === 3 ? (\n            <>\n              <h3>Second, what are the features of the application ?</h3>\n              <h4>\n                <ul>\n                  <li>Moving the start and finish node by drag and drop</li>\n                  <li>Adding walls</li>\n                  <li>Visualizing pathfinding algorithms</li>\n                  <li>Clearing the grid, leaves start and finish nodes (button)</li>\n                  <li>Clearing the path, leaves start, finish and wall nodes (button)</li>\n                </ul>\n              </h4>\n            </>\n          ) : null}\n          {this.props.currentPage === 4 ? (\n            <>\n              <h3>Moving the start and finish node by drag and drop</h3>\n              <h6>Hold left click and drag your mouse to move the start or finish node</h6>\n              <p>A lighter colored node is displayed during dragging to help position the node</p>\n              <img id=\"mainImage\" src={dragDrop} alt=\"dragDrop\" />\n            </>\n          ) : null}\n          {this.props.currentPage === 5 ? (\n            <>\n              <h3>Adding walls </h3>\n              <h6>You can toggle walls by left clicking on a node </h6>\n              <p>Hold click and drag your mouse to toggle walls on your path </p>\n              <img id=\"mainImage\" src={createWalls} alt=\"pathfindingImage\" />\n            </>\n          ) : null}\n          {this.props.currentPage === 6 ? (\n            <>\n              <h3>Visualizing a pathfinding algorithm</h3>\n              <h6>Click on \"Algorithms\" in the top bar and then choose an algorithm</h6>\n              <p>\n                The light blue tiles are visited by the algorithm, the yellow tiles are the path found by the algorithm\n              </p>\n              <img id=\"mainImage\" src={algoVisualization} alt=\"pathfindingImage\" />\n            </>\n          ) : null}\n          {this.props.currentPage === 7 ? (\n            <>\n              <h3>This is the end of the tutorial !</h3>\n              <h6>Please click \"Skip tutorial\" and start using the visualization tool</h6>\n              <p></p>\n              <img id=\"mainImage\" src={endImage} alt=\"pathfindingImage\" />\n            </>\n          ) : null}\n          <div id=\"tutorialCounter\">\n            {this.props.currentPage}/{this.props.nbPages}\n          </div>\n          <button\n            id=\"nextButton\"\n            className=\"btn btn-default navbar-btn\"\n            type=\"button\"\n            onClick={() => this.props.nextPage()}\n          >\n            Next\n          </button>\n          <button\n            id=\"previousButton\"\n            className=\"btn btn-default navbar-btn\"\n            type=\"button\"\n            onClick={() => this.props.previousPage()}\n          >\n            Previous\n          </button>\n          <button\n            id=\"skipButton\"\n            className=\"btn btn-default navbar-btn\"\n            type=\"button\"\n            onClick={() => this.props.skipTutorial()}\n          >\n            Skip Tutorial\n          </button>\n        </div>\n        <div className=\"grid\">\n          {this.props.grid.map((row, rowIdx) => {\n            return (\n              <div className=\"grid-row\" key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isFinishDragged, isStart, isStartDragged, isWall} = node\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isFinishDragged={isFinishDragged}\n                      isStart={isStart}\n                      isStartDragged={isStartDragged}\n                      isWall={isWall}\n                      mouseIsPressed={this.props.mouseIsPressed}\n                      onMouseDown={(row, col) => this.props.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) => this.props.handleMouseEnter(row, col)}\n                      onMouseUp={() => this.props.handleMouseUp(row, col)}\n                      row={row}\n                    ></Node>\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    grid: state.gridReducer.grid,\n    mouseIsPressed: state.gridReducer.mouseIsPressed,\n    currentPage: state.tutorialReducer.currentPage,\n    nbPages: state.tutorialReducer.nbPages\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getInitialGrid: () => dispatch({type: 'getInitialGrid'}),\n    skipTutorial: () => dispatch({type: 'skipTutorial'}),\n    nextPage: () => dispatch({type: 'nextPage'}),\n    previousPage: () => dispatch({type: 'previousPage'}),\n    handleMouseDown: (row, col) => dispatch({type: 'handleMouseDown', row: row, col: col}),\n    handleMouseEnter: (row, col) => dispatch({type: 'handleMouseEnter', row: row, col: col}),\n    handleMouseUp: (row, col) => dispatch({type: 'handleMouseUp', row: row, col: col})\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PathfindingVisualizer)\n","import React, {Component} from 'react'\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap'\nimport {connect} from 'react-redux'\n\nclass TopNavBar extends Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand onClick={() => this.props.clearGrid()} href=\"#\">\n          Pathfinding Visualizer\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item onClick={() => this.props.visualizeDijkstra()}>Dijkstra</NavDropdown.Item>\n              <NavDropdown.Item onClick={() => this.props.visualizeAstar()}>A*</NavDropdown.Item>\n              <NavDropdown.Item onClick={() => this.props.visualizeGreedyAstar()}>Greedy A*</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Item onClick={() => this.props.clearGrid()}>\n              <Nav.Link>Clear Grid</Nav.Link>\n            </Nav.Item>\n            <Nav.Item onClick={() => this.props.clearPath()}>\n              <Nav.Link>Clear Path</Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {}\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    visualizeDijkstra: () => dispatch({type: 'visualizeDijkstra'}),\n    visualizeAstar: () => dispatch({type: 'visualizeAstar'}),\n    visualizeGreedyAstar: () => dispatch({type: 'visualizeGreedyAstar'}),\n    clearGrid: () => dispatch({type: 'clearGrid'}),\n    clearPath: () => dispatch({type: 'clearPath'})\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TopNavBar)\n","import React, {Component} from 'react'\nimport {Nav} from 'react-bootstrap'\nimport {connect} from 'react-redux'\n\nimport './InformationNav.css'\n\nclass InformationNav extends Component {\n  render() {\n    return (\n      <Nav className=\"justify-content-center\">\n        <Nav.Item>\n          <Nav.Link eventKey=\"disabled\" disabled>\n            <div className=\"example-node example-node-start\"></div>\n            <p>Start node</p>\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"disabled\" disabled>\n            <div className=\"example-node example-node-finish\"></div>\n            <p>Finish node</p>\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"disabled\" disabled>\n            <div className=\"example-node example-node-wall\"></div>\n            <p>Wall</p>\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {}\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    visualizeDijkstra: () => dispatch({type: 'visualizeDijkstra'}),\n    visualizeAstar: () => dispatch({type: 'visualizeAstar'}),\n    clearBoard: () => dispatch({type: 'clearBoard'}),\n    clearPath: () => dispatch({type: 'clearPath'})\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InformationNav)\n","import {hot} from 'react-hot-loader/root'\nimport React, {Component} from 'react'\nimport './App.css'\nimport PathfindingVisualizer from './PathfindingVisualizer/PahtfindingVisualizer'\nimport TopNavBar from './TopNavBar/TopNavBar'\nimport InformationNav from './InformationNav/InformationNav'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopNavBar />\n        <InformationNav />\n        <PathfindingVisualizer />\n      </div>\n    )\n  }\n}\n\nexport default hot(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function getAllNodes(grid) {\n  const nodes = []\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node)\n    }\n  }\n  return nodes\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = []\n  let currentNode = finishNode\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode)\n    currentNode = currentNode.previousNode\n  }\n  return nodesInShortestPathOrder\n}\n\nexport function getUnvisitedNeighbors(node, grid) {\n  const neighbors = []\n  const {col, row} = node\n  if (row > 0) neighbors.push(grid[row - 1][col])\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col])\n  if (col > 0) neighbors.push(grid[row][col - 1])\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\n  return neighbors.filter(neighbor => !neighbor.isVisited)\n}\n","import {getAllNodes, getUnvisitedNeighbors} from './commonalities'\n\nexport function dijkstra(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false\n  }\n  const visitedNodesInOrder = []\n  startNode.distance = 0\n  const unvisitedNodes = getAllNodes(grid)\n  while (unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes)\n    const closestNode = unvisitedNodes.shift()\n    if (closestNode.isWall) continue\n    if (closestNode.distance === Infinity) return visitedNodesInOrder\n    closestNode.isVisited = true\n    visitedNodesInOrder.push(closestNode)\n    if (closestNode === finishNode) return visitedNodesInOrder\n    updateUnvisitedNeighbors(closestNode, grid)\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodaA, nodeB) => nodaA.distance - nodeB.distance)\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1\n    neighbor.previousNode = node\n  }\n}\n","import {getAllNodes, getUnvisitedNeighbors} from './commonalities'\n\nexport function astar(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false\n  }\n  const visitedNodesInOrder = []\n  startNode.cost = 0\n  startNode.distance = 0\n  const unvisitedNodes = getAllNodes(grid)\n  while (unvisitedNodes.length) {\n    sortNodesByCost(unvisitedNodes)\n    const closestNode = unvisitedNodes.shift()\n    if (closestNode.isWall) continue\n    if (closestNode.distance === Infinity) return visitedNodesInOrder\n    closestNode.isVisited = true\n    visitedNodesInOrder.push(closestNode)\n    if (closestNode === finishNode) return visitedNodesInOrder\n    updateUnvisitedNeighbors(closestNode, grid, finishNode)\n  }\n}\n\nfunction sortNodesByCost(unvisitedNodes) {\n  unvisitedNodes.sort((nodaA, nodeB) => nodaA.cost - nodeB.cost)\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1\n    neighbor.heuristic = Math.abs(finishNode.col - neighbor.col) + Math.abs(finishNode.row - neighbor.row)\n    neighbor.cost = neighbor.distance + neighbor.heuristic\n    neighbor.previousNode = node\n    if (neighbor.isWall) neighbor.cost = Infinity\n  }\n}\n","import {getAllNodes, getUnvisitedNeighbors} from './commonalities'\n\nexport function greedyAstar(grid, startNode, finishNode) {\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false\n  }\n  const visitedNodesInOrder = []\n  startNode.heuristic = 0\n  startNode.distance = 0\n  const unvisitedNodes = getAllNodes(grid)\n  while (unvisitedNodes.length) {\n    sortNodesByHeuristic(unvisitedNodes)\n    const closestNode = unvisitedNodes.shift()\n    if (closestNode.isWall) continue\n    if (closestNode.distance === Infinity) return visitedNodesInOrder\n    closestNode.isVisited = true\n    visitedNodesInOrder.push(closestNode)\n    if (closestNode === finishNode) return visitedNodesInOrder\n    updateUnvisitedNeighbors(closestNode, grid, finishNode)\n  }\n}\n\nfunction sortNodesByHeuristic(unvisitedNodes) {\n  unvisitedNodes.sort((nodaA, nodeB) => nodaA.heuristic - nodeB.heuristic)\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid)\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1\n    neighbor.heuristic = Math.abs(finishNode.col - neighbor.col) + Math.abs(finishNode.row - neighbor.row)\n    neighbor.cost = neighbor.distance + node.heuristic\n    neighbor.previousNode = node\n    if (neighbor.isWall) neighbor.heuristic = Infinity\n  }\n}\n","import {dijkstra} from '../algorithms/dijkstra'\nimport {getNodesInShortestPathOrder} from '../algorithms/commonalities'\nimport {astar} from '../algorithms/astar'\nimport {greedyAstar} from '../algorithms/greedyAstar'\n\nconst initialState = {\n  grid: [],\n  mouseIsPressed: false,\n  startIsDragged: false,\n  finishIsDragged: false\n}\nvar DRAGGED_NODE_PREVIOUS_ROW = Infinity\nvar DRAGGED_NODE_PREVIOUS_COL = Infinity\nvar DRAGGED_NODE_INITIAL_ROW = Infinity\nvar DRAGGED_NODE_INITIAL_COL = Infinity\nvar START_NODE_ROW = 10\nvar START_NODE_COL = 5\nvar FINISH_NODE_ROW = 10\nvar FINISH_NODE_COL = 20\nconst ROWS_NB = 20\nconst COLS_NB = 25\n\nconst reducer = (state = initialState, action) => {\n  const newState = {...state}\n\n  switch (action.type) {\n    case 'clearGrid':\n      newState.grid = clearGrid()\n      break\n\n    case 'clearPath':\n      newState.grid = clearPath(newState.grid)\n      break\n\n    case 'getInitialGrid':\n      newState.grid = getInitialGrid()\n      break\n\n    case 'handleMouseDown':\n      newState.mouseIsPressed = true\n      const stateAfterDrag = getNewStateWithStartOrFinishDragged(\n        newState.grid,\n        action.row,\n        action.col,\n        newState.startIsDragged,\n        newState.finishIsDragged\n      )\n      newState.grid = stateAfterDrag.grid\n      newState.startIsDragged = stateAfterDrag.startIsDragged\n      newState.finishIsDragged = stateAfterDrag.finishIsDragged\n      newState.grid = getNewGridWithWallToggled(\n        newState.grid,\n        action.row,\n        action.col,\n        newState.startIsDragged,\n        newState.finishIsDragged\n      )\n      break\n\n    case 'handleMouseEnter':\n      if (newState.mouseIsPressed === false) break\n      const stateAfterDragEnter = getNewStateWithStartOrFinishDragged(\n        newState.grid,\n        action.row,\n        action.col,\n        newState.startIsDragged,\n        newState.finishIsDragged\n      )\n      newState.grid = stateAfterDragEnter.grid\n      newState.startIsDragged = stateAfterDragEnter.startIsDragged\n      newState.finishIsDragged = stateAfterDragEnter.finishIsDragged\n      newState.grid = getNewGridWithWallToggled(\n        newState.grid,\n        action.row,\n        action.col,\n        newState.startIsDragged,\n        newState.finishIsDragged\n      )\n      break\n\n    case 'handleMouseUp':\n      newState.mouseIsPressed = false\n      newState.grid = getNewGridWithStartOrFinishDropped(\n        newState.grid,\n        action.row,\n        action.col,\n        newState.startIsDragged,\n        newState.finishIsDragged\n      )\n      newState.startIsDragged = false\n      newState.finishIsDragged = false\n      break\n\n    case 'visualizeAstar':\n      newState.grid = clearPath(newState.grid)\n      visualize(newState.grid, astar)\n      break\n\n    case 'visualizeDijkstra':\n      newState.grid = clearPath(newState.grid)\n      visualize(newState.grid, dijkstra)\n      break\n\n    case 'visualizeGreedyAstar':\n      newState.grid = clearPath(newState.grid)\n      visualize(newState.grid, greedyAstar)\n      break\n\n    default:\n      break\n  }\n\n  return newState\n}\n\nconst getInitialGrid = () => {\n  const grid = []\n  for (let row = 0; row < ROWS_NB; row++) {\n    const currentRow = []\n    for (let col = 0; col < COLS_NB; col++) {\n      currentRow.push(createNode(row, col))\n    }\n    grid.push(currentRow)\n  }\n  return grid\n}\n\nconst clearGrid = () => {\n  for (let row = 0; row < ROWS_NB; row++) {\n    for (let col = 0; col < COLS_NB; col++) {\n      document.getElementById(`node-${row}-${col}`).className = 'node'\n    }\n  }\n  document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start'\n  document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish'\n  return getInitialGrid()\n}\n\nconst clearPath = grid => {\n  const newGrid = grid.slice()\n  for (let row = 0; row < ROWS_NB; row++) {\n    for (let col = 0; col < COLS_NB; col++) {\n      if (grid[row][col].isWall) {\n        document.getElementById(`node-${row}-${col}`).className = 'node node-wall'\n        newGrid[row][col] = createNode(row, col)\n        newGrid[row][col].isWall = true\n      } else {\n        document.getElementById(`node-${row}-${col}`).className = 'node'\n        newGrid[row][col] = createNode(row, col)\n      }\n    }\n  }\n  document.getElementById(`node-${START_NODE_ROW}-${START_NODE_COL}`).className = 'node node-start'\n  document.getElementById(`node-${FINISH_NODE_ROW}-${FINISH_NODE_COL}`).className = 'node node-finish'\n  return newGrid\n}\n\nconst createNode = (row, col) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    cost: Infinity,\n    heuristic: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n    isStartDragged: false,\n    isFinishDragged: false\n  }\n}\n\nconst getNewGridWithWallToggled = (grid, row, col, startIsDragged, finishIsDragged) => {\n  const newGrid = grid.slice()\n  const node = newGrid[row][col]\n  if (node.isStart || node.isFinish || startIsDragged || finishIsDragged) return newGrid\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  }\n  newGrid[row][col] = newNode\n  return newGrid\n}\n\nconst getNewStateWithStartOrFinishDragged = (grid, row, col, startIsDragged, finishIsDragged) => {\n  const newGrid = grid.slice()\n  const node = newGrid[row][col]\n  var newStartIsDragged = false\n  var newFinishIsDragged = false\n\n  if (node.isStart || startIsDragged) {\n    const newNode = {\n      ...node,\n      isStartDragged: true\n    }\n    newGrid[row][col] = newNode\n    newStartIsDragged = true\n    if (node.isStart) {\n      DRAGGED_NODE_INITIAL_COL = col\n      DRAGGED_NODE_INITIAL_ROW = row\n    }\n    if (startIsDragged) {\n      newGrid[DRAGGED_NODE_PREVIOUS_ROW][DRAGGED_NODE_PREVIOUS_COL].isStartDragged = false\n    }\n    DRAGGED_NODE_PREVIOUS_ROW = row\n    DRAGGED_NODE_PREVIOUS_COL = col\n  }\n  if (node.isFinish || finishIsDragged) {\n    const newNode = {\n      ...node,\n      isFinishDragged: true\n    }\n    newGrid[row][col] = newNode\n    newFinishIsDragged = true\n    if (node.isFinish) {\n      DRAGGED_NODE_INITIAL_COL = col\n      DRAGGED_NODE_INITIAL_ROW = row\n    }\n    if (finishIsDragged) {\n      newGrid[DRAGGED_NODE_PREVIOUS_ROW][DRAGGED_NODE_PREVIOUS_COL].isFinishDragged = false\n    }\n    DRAGGED_NODE_PREVIOUS_ROW = row\n    DRAGGED_NODE_PREVIOUS_COL = col\n  }\n  if (!node.isStart && !node.isFinish) {\n    return {grid: newGrid, startIsDragged: newStartIsDragged, finishIsDragged: newFinishIsDragged}\n  }\n  return {grid: newGrid, startIsDragged: newStartIsDragged, finishIsDragged: newFinishIsDragged}\n}\n\nconst getNewGridWithStartOrFinishDropped = (grid, row, col, startIsDragged, finishIsDragged) => {\n  const newGrid = grid.slice()\n  const node = newGrid[row][col]\n  if (!startIsDragged && !finishIsDragged) return newGrid\n  if (startIsDragged) {\n    const newNode = {\n      ...node,\n      isStart: true,\n      isStartDragged: false\n    }\n    newGrid[row][col] = newNode\n    START_NODE_COL = col\n    START_NODE_ROW = row\n    if (row !== DRAGGED_NODE_INITIAL_ROW || col !== DRAGGED_NODE_INITIAL_COL) {\n      newGrid[DRAGGED_NODE_INITIAL_ROW][DRAGGED_NODE_INITIAL_COL].isStart = false\n    }\n  }\n  if (finishIsDragged) {\n    const newNode = {\n      ...node,\n      isFinish: true,\n      isFinishDragged: false\n    }\n    newGrid[row][col] = newNode\n    FINISH_NODE_COL = col\n    FINISH_NODE_ROW = row\n    if (row !== DRAGGED_NODE_INITIAL_ROW || col !== DRAGGED_NODE_INITIAL_COL) {\n      newGrid[DRAGGED_NODE_INITIAL_ROW][DRAGGED_NODE_INITIAL_COL].isFinish = false\n    }\n  }\n  return newGrid\n}\n\nconst animateAlgo = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n  for (let i = 0; i < visitedNodesInOrder.length; i++) {\n    setTimeout(() => {\n      const node = visitedNodesInOrder[i]\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited'\n    }, 10 * i)\n  }\n  setTimeout(() => {\n    animateShortestPath(nodesInShortestPathOrder)\n  }, 10 * visitedNodesInOrder.length)\n}\n\nconst animateShortestPath = nodesInShortestPathOrder => {\n  for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n    setTimeout(() => {\n      const node = nodesInShortestPathOrder[i]\n      document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path'\n    }, 50 * i)\n  }\n}\n\nconst visualize = (grid, algo) => {\n  const startNode = grid[START_NODE_ROW][START_NODE_COL]\n  const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL]\n  const visitedNodesInOrder = algo(grid, startNode, finishNode)\n  const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode)\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder)\n}\n\nexport default reducer\n","const initialState = {\n  currentPage: 1,\n  nbPages: 7\n}\n\nconst reducer = (state = initialState, action) => {\n  const newState = {...state}\n\n  switch (action.type) {\n    case 'nextPage':\n      newState.currentPage = nextPage(newState.currentPage)\n      break\n\n    case 'previousPage':\n      newState.currentPage = previousPage(newState.currentPage)\n      break\n\n    case 'skipTutorial':\n      skipTutorial()\n      break\n\n    default:\n      break\n  }\n\n  return newState\n}\n\nconst skipTutorial = () => {\n  document.getElementById('tutorial').style.display = 'none'\n}\n\nconst previousPage = currentPage => {\n  if (currentPage === 1) return currentPage\n  const newPage = currentPage - 1\n  return newPage\n}\n\nconst nextPage = currentPage => {\n  if (currentPage === initialState.nbPages) return currentPage\n  const newPage = currentPage + 1\n  return newPage\n}\n\nexport default reducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport {Provider} from 'react-redux'\nimport {createStore, combineReducers} from 'redux'\nimport gridReducer from './store/gridReducer'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport tutorialReducer from './store/turorialReducer'\n\nconst rootReducer = combineReducers({\n  gridReducer: gridReducer,\n  tutorialReducer: tutorialReducer\n})\nconst store = createStore(rootReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}